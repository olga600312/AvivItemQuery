package com.aviv_pos.olgats.avivitemquery;

import android.app.ProgressDialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageManager;
import android.support.design.widget.Snackbar;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.KeyEvent;
import android.view.View;
import android.view.inputmethod.EditorInfo;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import com.aviv_pos.olgats.avivitemquery.acync.ItemSearchTask;
import com.google.zxing.integration.android.IntentIntegrator;
import com.google.zxing.integration.android.IntentResult;
import com.journeyapps.barcodescanner.CaptureManager;
import com.journeyapps.barcodescanner.CompoundBarcodeView;

public class ScannerActivity extends AppCompatActivity implements CompoundBarcodeView.TorchListener {
    private static final String TAG = "MainActivity";
    private CaptureManager capture;
    private CompoundBarcodeView barcodeScannerView;
    private Button switchFlashlightButton;
    private Button btnSearch, btnClear;
    private EditText etSearchByName, etSearchByCode;
    private static final String ACTION_FOR_INTENT_CALLBACK = "THIS_IS_A_UNIQUE_KEY_WE_USE_TO_COMMUNICATE";
    private ProgressDialog progress;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_scanner);

        btnSearch = (Button) findViewById(R.id.btnSearch);
        btnClear = (Button) findViewById(R.id.btnClear);

        etSearchByCode = (EditText) findViewById(R.id.etSearchByCode);
        etSearchByName = (EditText) findViewById(R.id.etSearchByName);
        btnSearch.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                performSearch(v);
            }
        });

        btnClear.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                clear();
            }
        });

        TextView.OnEditorActionListener onEditorActionListener = new TextView.OnEditorActionListener() {
            @Override
            public boolean onEditorAction(TextView v, int keyCode, KeyEvent event) {
                if (keyCode == EditorInfo.IME_ACTION_SEARCH) {
                    performSearch(v);
                    return true;
                }
                return false;
            }
        };

        etSearchByCode.setOnEditorActionListener(onEditorActionListener);
        etSearchByName.setOnEditorActionListener(onEditorActionListener);


        barcodeScannerView = (CompoundBarcodeView) findViewById(R.id.zxing_barcode_scanner);
        barcodeScannerView.setTorchListener(this);

        switchFlashlightButton = (Button) findViewById(R.id.switch_flashlight);
        // if the device does not have flashlight in its camera,
        // then remove the switch flashlight button...
        if (!hasFlash()) {
            switchFlashlightButton.setVisibility(View.GONE);
        } else {
            switchFlashlightButton.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    switchFlashlight(v);
                }
            });
        }
        capture = new CaptureManager(this, barcodeScannerView);
        capture.initializeFromIntent(getIntent(), savedInstanceState);
        capture.decode();
    }

    @Override
    protected void onResume() {
        super.onResume();
        registerReceiver(receiver, new IntentFilter(ACTION_FOR_INTENT_CALLBACK));
        capture.onResume();
    }

    @Override
    protected void onPause() {
        super.onPause();
        unregisterReceiver(receiver);
        capture.onPause();
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        capture.onDestroy();
    }

    @Override
    protected void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        capture.onSaveInstanceState(outState);
    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        return barcodeScannerView.onKeyDown(keyCode, event) || super.onKeyDown(keyCode, event);
    }

    /**
     * Check if the device's camera has a Flashlight.
     *
     * @return true if there is Flashlight, otherwise false.
     */
    private boolean hasFlash() {
        return getApplicationContext().getPackageManager()
                .hasSystemFeature(PackageManager.FEATURE_CAMERA_FLASH);
    }

    public void switchFlashlight(View view) {
        if (getString(R.string.turn_on_flashlight).equals(switchFlashlightButton.getText())) {
            barcodeScannerView.setTorchOn();
        } else {
            barcodeScannerView.setTorchOff();
        }
    }

    @Override
    public void onTorchOn() {
        switchFlashlightButton.setText(R.string.turn_off_flashlight);
    }

    @Override
    public void onTorchOff() {
        switchFlashlightButton.setText(R.string.turn_on_flashlight);
    }


    private void clear() {
        etSearchByCode.setText("");
        etSearchByName.setText("");
    }


    private void performSearch(View v) {
        Utilities.hideKeyboard(v);
        capture.onPause();
        if (validate(etSearchByCode, 3) && validate(etSearchByName, 3)) {
            ItemSearchCriteria c = new ItemSearchCriteria();
            c.setCode(etSearchByCode.getText().toString());
            c.setName(etSearchByName.getText().toString());
            onSearchCodePressed(c);
        } else
            capture.onResume();
    }


    private boolean validate(EditText editText, int limit) {
        int l = editText.getText().toString().trim().length();
        boolean empty = l > 0 && l < limit;
        if (empty) {
            Snackbar.make(editText, getString(R.string.invalid_character_count), Snackbar.LENGTH_LONG).setAction("Action", null).show();
            editText.requestFocus();
            editText.selectAll();
        }
        return !empty;
    }


    public void onSearchCodePressed(ItemSearchCriteria data) {
        getContent(data);
    }



    //on ActivityResult method
    public void onActivityResult(int requestCode, int resultCode, Intent intent) {
        IntentResult scan = IntentIntegrator.parseActivityResult(requestCode, resultCode, intent);
        if (scan != null) {
            String contents = scan.getContents();
            if (contents != null) {
                String format = scan.getFormatName();
                Toast.makeText(this, "Content:" + contents + " Format:" + format, Toast.LENGTH_LONG).show();
                ItemSearchCriteria c = new ItemSearchCriteria();
                c.setCode(contents);
                getContent(c);
            }
        }
    }

    private void getContent(ItemSearchCriteria c) {
        // the request
        if (c != null) {
            try {
                final ItemSearchTask task = new ItemSearchTask(this, ACTION_FOR_INTENT_CALLBACK);
                task.execute(c);
                progress = new ProgressDialog(this);
                progress.setTitle(getString(R.string.loading));
                progress.setIndeterminate(true);
                progress.setMessage(getString(R.string.waiting_for_result));
                progress.setCancelable(false);
                progress.setButton(DialogInterface.BUTTON_NEGATIVE, getString(R.string.cancel), new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                        task.cancel(true);
                    }
                });
                progress.show();
            } catch (Exception e) {
                Log.e(TAG, e.getMessage());
            }
        }
    }


    public void setProgressMessage(String msg) {
        if (progress != null) {
            progress.setMessage(msg);
        }
    }

    /**
     * Our Broadcast Receiver. We get notified that the data is ready this way.
     */
    private BroadcastReceiver receiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            // clear the progress indicator
            if (progress != null) {
                progress.dismiss();
            }
            int response = intent.getIntExtra(ItemSearchTask.RESPONSE, -1);
            switch (response) {
                case WSConstants.SUCCESS:
                    int size = intent.getIntExtra(ItemSearchTask.RESPONSE_SIZE, 0);
                    switch (size) {
                        case 0:
                            android.support.v7.app.AlertDialog ad = new AlertDialog.Builder(ScannerActivity.this).setPositiveButton(getString(R.string.ok),
                                    new DialogInterface.OnClickListener() {
                                        @Override
                                        public void onClick(DialogInterface dialog, int which) {
                                        }
                                    }).setMessage(getString(R.string.alertItemNotFind)).show();
                            break;
                        case 1:
                            String code = intent.getStringExtra(ItemSearchTask.RESPONSE_FIRST);
                            if (code != null) {
                                showItem(code);
                            }
                            break;
                        default:
                            showItemList(size);
                    }
                    break;
                case WSConstants.CLIENT_CONNECTION_ERROR:
                    android.support.v7.app.AlertDialog ad = new AlertDialog.Builder(ScannerActivity.this).setPositiveButton(getString(R.string.ok),
                            new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialog, int which) {

                                }
                            }).setMessage(getString(R.string.alertClientConnectionError)).show();
                    break;
                case WSConstants.PRIVATE_WS_NOT_REACHABLE:
                    ad = new AlertDialog.Builder(ScannerActivity.this).setPositiveButton(getString(R.string.ok),
                            new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialog, int which) {

                                }
                            }).setMessage(getString(R.string.alertPrivateWSConnectionError)).show();
                    break;
                case WSConstants.SESSION_CLOSED:
                    onSessionClose();
                    break;

            }
        }
    };

    private void showItem(String code) {
        /*Intent intentItem = new Intent(this, ItemActivity.class);
        intentItem.putExtra("itemCode", code);
        startActivity(intentItem);*/
    }

    private void showItemList(int size) {
        Toast.makeText(this, "Item list:" + size, Toast.LENGTH_SHORT).show();
       /* Intent intentItem = new Intent(this, ItemListActivity.class);
        intentItem.putExtra("itemCode", code);
        startActivity(intentItem);*/
    }

    private void onSessionClose() {
        new AlertDialog.Builder(this).setPositiveButton(getString(R.string.login),
                new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        Intent intent = new Intent(ScannerActivity.this, LoginActivity.class);
                        startActivity(intent);
                    }
                }).setNegativeButton(getString(R.string.exit),
                new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        finish();

                    }
                }).setMessage(getString(R.string.alertSessionClosed)).show();
    }
}
